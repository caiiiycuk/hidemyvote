apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply from: '../gpprivate/android.gradle'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.github.caiiiycuk.hma"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1150
        versionName "1.15"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file('../gpprivate/' + project.keyStore)
            storePassword project.keyPassword
            keyAlias project.keyAlias
            keyPassword project.keyPassword
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            multiDexEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk false
        }
    }
    // @caiiiycuk: splits does not work properly for javacv, using flavors instead
    flavorDimensions "version"
    productFlavors {
        v7a {}
        v8a {}
        x86 {}
        x86_64 {}
    }
}

dependencies {
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0-beta01'

    implementation "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    implementation group: 'org.bytedeco', name: 'javacv', version: javacvVersion

    v7aImplementation group: 'org.bytedeco', name: 'opencv', version: "4.1.2-$javacvVersion", classifier: 'android-arm'
    v7aImplementation group: 'org.bytedeco', name: 'openblas', version: "0.3.7-$javacvVersion", classifier: 'android-arm'
    v8aImplementation group: 'org.bytedeco', name: 'opencv', version: "4.1.2-$javacvVersion", classifier: 'android-arm64'
    v8aImplementation group: 'org.bytedeco', name: 'openblas', version: "0.3.7-$javacvVersion", classifier: 'android-arm64'
    x86Implementation group: 'org.bytedeco', name: 'opencv', version: "4.1.2-$javacvVersion", classifier: 'android-x86'
    x86Implementation group: 'org.bytedeco', name: 'openblas', version: "0.3.7-$javacvVersion", classifier: 'android-x86'
    x86_64Implementation group: 'org.bytedeco', name: 'opencv', version: "4.1.2-$javacvVersion", classifier: 'android-x86_64'
    x86_64Implementation group: 'org.bytedeco', name: 'openblas', version: "0.3.7-$javacvVersion", classifier: 'android-x86_64'

    implementation 'com.facebook.soloader:soloader:0.8.2'
    implementation "com.facebook.litho:litho-core:$lithoVersion"
    implementation "com.facebook.litho:litho-widget:$lithoVersion"
    debugImplementation "com.facebook.litho:litho-annotations:$lithoVersion"
    annotationProcessor "com.facebook.litho:litho-processor:$lithoVersion"

    implementation 'com.pnikosis:materialish-progress:1.7'

    implementation "androidx.camera:camera-view:$cameraVersion"
    implementation "androidx.camera:camera-camera2:$cameraxVersion"
    implementation "androidx.camera:camera-lifecycle:$cameraxVersion"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.13'
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def file = output.outputFile.getName();
        def versionSubCode;
        if (file.contains("v7a")) {
            versionSubCode = 1;
        } else if (file.contains("v8a")) {
            versionSubCode = 2;
        } else if (file.contains("x86_64")) {
            versionSubCode = 4;
        } else if (file.contains("x86")) {
            versionSubCode = 3;
        } else {
            throw new IllegalStateException("Unknown versionSubCode for file " + file);
        }

        output.versionCodeOverride =
                variant.versionCode + versionSubCode;
    }
}
